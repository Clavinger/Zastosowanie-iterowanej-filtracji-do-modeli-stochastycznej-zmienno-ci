set.seed(87932)
logLik(pfilter(FSV.filt,params=c(mu=as.numeric(params_nowe2['mu']),
gamma=as.numeric(params_nowe2['gamma']),
phi=as.numeric(params_nowe2['phi']),
sigma_eta=as.numeric(params_nowe2['sigma_eta']),
gamma=xx4[i]),
Np=FSVlist[[1]][run_level] ))
}
stopCluster(cl)
beep(2)
plot(xx4, L.FSV.log4, type='l',xlab=expression(gamma),ylab="logLik")
#points(xx3, L.FSV.log3)
points(if.FSV.box[,'sigma_eta'], if.FSV.box[,'logLik'] ,col='red',pch=16)
p4=loess(L.FSV.log4~xx4,span=0.5)
lines(xx4,p4$fitted,col='blue',lwd=2)
#parametr gamma
xx4<-seq(from=params_nowe2['gamma']-2,to=params_nowe2['gamma']+2,length.out = 100)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
L.FSV.log4<- foreach(i=1:length(xx4) ,.packages='pomp', .export = "FSVlist",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932)
logLik(pfilter(FSV.filt,params=c(mu=as.numeric(params_nowe2['mu']),
phi=as.numeric(params_nowe2['phi']),
sigma_eta=as.numeric(params_nowe2['sigma_eta']),
gamma=xx4[i]),
Np=FSVlist[[1]][run_level] ))
}
stopCluster(cl)
beep(2)
plot(xx4, L.FSV.log4, type='l',xlab=expression(gamma),ylab="logLik")
#points(xx3, L.FSV.log3)
points(if.FSV.box[,'sigma_eta'], if.FSV.box[,'logLik'] ,col='red',pch=16)
p4=loess(L.FSV.log4~xx4,span=0.5)
lines(xx4,p4$fitted,col='blue',lwd=2)
plot(xx4, L.FSV.log4, type='l',xlab=expression(gamma),ylab="logLik")
#points(xx3, L.FSV.log3)
points(if.FSV.box[,'gamma'], if.FSV.box[,'logLik'] ,col='red',pch=16)
p4=loess(L.FSV.log4~xx4,span=0.5)
lines(xx4,p4$fitted,col='blue',lwd=2)
wykres.gamma=as.data.frame(t(rbind(xx4,as.vector(L.FSV.log4))))
names(wykres.gamma)<-c("gamma","loglik")
g3<-ggplot(data = wykres.gamma, aes(x = gamma, y = loglik))  +
geom_point(color = "black", size = 1)+
ggtitle(expression(gamma))+labs(x=expression(gamma))+geom_smooth()+theme_bw()
g4<-ggplot(data = wykres.gamma, aes(x = gamma, y = loglik))  +
geom_point(color = "black", size = 1)+
ggtitle(expression(gamma))+labs(x=expression(gamma))+geom_smooth()+theme_bw()
g3<-ggplot(data = wykres.sigma_eta, aes(x = sigma_eta, y = loglik))  +
geom_point(color = "black", size = 1)+
ggtitle(expression(sigma[eta]))+labs(x=expression(sigma[eta]))+geom_smooth()+theme_bw()
grid.arrange(g1, g2,g3,g4, ncol=2)
rm(list = ls())
gc()
#rm(list = ls())
#gc()
setwd("C:/Users/user/Documents/github/Zastosowanie-iterowanej-filtracji-do-modeli-stochastycznej-zmienno-ci/Dane")
#pakiety
library(pomp)
library(beepr)
library(doParallel)
library(doSNOW)
library(lattice)
library(ggplot2)
library(GGally)
library(gridExtra)
library(reshape2)
##########################################################################
##########################################################################
################################################################ustawienia
#liczba symulacji
sym=2
#liczba obserwacji
n=1000
#parametry
mu = -0.5
phi = 0.98
sigma = 0.2
##########################################################################
##########################################################################
######################################################implementacja modelu
####nazwy
bsv_statenames <- c("H","Y_state")
bsv_rp_names <- c("mu","phi","sigma_eta")
#bsv_ivp_names <- c("H_0")
#bsv_paramnames <- c(bsv_rp_names,bsv_ivp_names)
bsv_paramnames <- c(bsv_rp_names)
bsv_covarnames <- "covaryt"
rproc1 <- "
double omega;
omega = rnorm(0,sigma_eta );
H = mu*(1 - phi) + phi*H + omega;
"
####rownanie procesu pomiaru
rproc2.sim <- "
Y_state = rnorm( 0,exp(H/2) );
"
###do wypelniania danych
rproc2.filt <- "
Y_state = covaryt;
"
###symulacja modelu SVL
bsv_rproc.sim <- paste(rproc1,rproc2.sim)
####filtr czasteczkowy
bsv_rproc.filt <- paste(rproc1,rproc2.filt)
######inicalizacja
#H=H_0
bsv_initializer <- "
H = rnorm(mu  ,sigma_eta/sqrt((1-phi*phi))) ;
Y_state = rnorm( 0,exp(H/2) );
"
###????y=Y_state;
bsv_rmeasure <- "
y=rnorm( 0,exp(H/2) );
"
####rozk?ad warunkowy zmiennej Y
bsv_dmeasure <- "
lik=dnorm(y,0,exp(H/2),give_log);
"
####przeskalowanie parametr?w
bsv_toEstimationScale <- "
Tsigma_eta = log(sigma_eta);
Tphi = logit(phi);
"
bsv_fromEstimationScale <- "
Tsigma_eta = exp(sigma_eta);
Tphi = expit(phi);
"
bsv.model<-pomp(data=data.frame(y=1:n,
time=1:n),
statenames=bsv_statenames,
paramnames=bsv_paramnames,
covarnames=bsv_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=0:n,
time=0:n),
tcovar="time",
rmeasure=Csnippet(bsv_rmeasure),
dmeasure=Csnippet(bsv_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(bsv_rproc.filt),delta.t=1),
initializer=Csnippet(bsv_initializer),
toEstimationScale=Csnippet(bsv_toEstimationScale),
fromEstimationScale=Csnippet(bsv_fromEstimationScale)
)
#######################################ustawienia dla pomp
params_test=c(
mu=mu,
phi=phi,
sigma_eta=sigma
)
###trzy szybkosci filtru: 1 -szybki, 2 -sredni, 3 - wolny
run_level <- 1
#liczba czasteczek
bsv_Np <-          c(100,1e3,1e3)
bsv_Nmif <-        c(10, 50,150)
bsv_Nreps_eval <-  c(4,  10,  20)
bsv_Nreps_local <- c(4, 10, 10)
bsv_Nreps_global <-c(4, 10, 10)
bsvlist<-list(bsv_Np ,bsv_Nmif,bsv_Nreps_eval,
bsv_Nreps_local,bsv_Nreps_global )
#parametry do metody mif2
bsv_rw.sd_rp <- 0.02
bsv_rw.sd_ivp <- 0.1
bsv_cooling.fraction.50 <- 0.5
##########################################################################
##########################################################################
########################################################symulowanie danych
log.volatility.list  <-simulate(bsv.model,nsim=1,seed=123,params=c(mu=mu,phi=phi,sigma_eta=sigma),
states = TRUE, obs = TRUE)
zwroty.sim= log.volatility.list$obs[1,1,]
log.volatility.sim= log.volatility.list$states[1,1,]
par(mfrow=c(3,1))
plot(log.volatility.list$obs[1,1,],type='l',ylab="y",main="zwroty")
plot(log.volatility.list$states[1,1,],type='l',ylab="h",main="log-zmiennosc")
plot(exp(log.volatility.list$states[1,1,]/2),type='l',ylab="exp(h/2)",main="zmiennosc")
par(mfrow=c(1,1))
wykres1= rbind(log.volatility.list$obs[1,1,],
log.volatility.list$states[1,1,],
exp(log.volatility.list$states[1,1,]/2))
row.names(wykres1) = c("y","H","exp(H/2)")
wykres1=as.data.frame(t(wykres1))
g1<-ggplot(data = as.data.frame(wykres1), aes(x = 1:n, y = y))  +
geom_line(color = "royalblue", size = .5)+ggtitle('zwroty')+labs(x="time")+theme_bw()
g2<-ggplot(data = as.data.frame(wykres1), aes(x = 1:n, y = H))  +
geom_line(color = "royalblue", size = .5)+ggtitle('log-zmienność')+labs(x="time")+theme_bw()
g3<-ggplot(data = as.data.frame(wykres1), aes(x = 1:n, y = exp(H/2)))  +
geom_line(color = "royalblue", size = .5)+ggtitle('zmienność')+labs(x="time")+theme_bw()
grid.arrange(g1, g2,g3, nrow=3)
##########################################################################
##########################################################################
########################################################Filtrowanie danych
bsv.filt<-pomp(data=data.frame(y=zwroty.sim,
time=1:n),
statenames=bsv_statenames,
paramnames=bsv_paramnames,
covarnames=bsv_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,zwroty.sim),
time=0:n),
tcovar="time",
rmeasure=Csnippet(bsv_rmeasure),
dmeasure=Csnippet(bsv_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(bsv_rproc.filt),delta.t=1),
initializer=Csnippet(bsv_initializer),
toEstimationScale=Csnippet(bsv_toEstimationScale),
fromEstimationScale=Csnippet(bsv_fromEstimationScale)
)
#wykres filtracji dla prawdziwych parametr?w
pf1 <- pfilter(bsv.filt,params=params_test,
Np=1000,filter.traj=T)
plot(pf1)
coef(pf1)
wykres2.matrix<-rbind(pf1@data,
pf1@eff.sample.size,
pf1@cond.loglik,
pf1@filter.traj[1, 1,2:1001],
exp(pf1@filter.traj[1, 1,2:1001]/2),
log.volatility.list$states[1,1,],
exp(log.volatility.list$states[1,1,]/2),
1:n)
row.names(wykres2.matrix)<-c("y","eff.sample.size","cond.loglik",
"filtered_H", "filtered_exp","H","exp","time")
wykres2<-as.data.frame(t(wykres2.matrix))
wykres2a<-as.data.frame(t(wykres2.matrix[c(6,4,8),]))
names(wykres2a)<-c("Symulacja","Filtracja", "time")
wykres2a.long<-melt(wykres2a,id="time")
names(wykres2a.long)<-c("time","Rodzaj","value")
wykres2b<-as.data.frame(t(wykres2.matrix[c(7,5,8),]))
names(wykres2b)<-c("Symulacja","Filtracja", "time")
wykres2b.long<-melt(wykres2b,id="time")
names(wykres2b.long)<-c("time","Rodzaj","value")
g1<-ggplot(data = wykres2, aes(x = 1:n, y = y))  +
geom_line(color = "royalblue", size = .5)+ggtitle('zwroty')+labs(x="time")+theme_bw()
g2<-ggplot(data = wykres2, aes(x = time))  +
geom_line(aes(y = H), colour="royalblue",size = .5)+
geom_line(aes(y = filtered_H), colour="red",size = .5,linetype = "dashed")+
ggtitle('log-zmienność')+labs(x="time")+theme_bw()
#druga wersja
g2a<-ggplot(data = wykres2a.long, aes(x = time,y=value,colour=Rodzaj,linetype=Rodzaj) ) +ggtitle('log-zmienność')+
geom_line(size = .5)+labs(y="H")+theme_bw()+scale_colour_manual(values=c("royalblue","tomato"))+
scale_linetype_manual(values=c("solid", "dashed"))
g3<-ggplot(data = wykres2, aes(x = 1:n ))  +
geom_line( aes(y = exp), colour="royalblue",size = .5)+
geom_line( aes(y = filtered_exp), colour="red",size = .5,linetype = "dashed")+
ggtitle( 'zmienność')+labs(x="time",y="exp(H/2)")+theme_bw()
#druga wersja
g3a<-ggplot(data = wykres2b.long, aes(x = time,y=value,colour=Rodzaj,linetype=Rodzaj) ) +ggtitle('zmienność')+
geom_line(size = .5)+labs(y="exp(H/2)")+theme_bw()+scale_colour_manual(values=c("royalblue","tomato"))+
scale_linetype_manual(values=c("solid", "dashed"))
g4<-ggplot(data = wykres2, aes(x = 1:n, y = eff.sample.size))  +
geom_line(color = "royalblue", size = .5)+ggtitle('eff.sample.size')+labs(x="time")+theme_bw()
g5<-ggplot(data = wykres2, aes(x = 1:n, y = cond.loglik))  +
geom_line(color = "royalblue", size = .5)+ggtitle('cond.loglik')+labs(x="time")+theme_bw()
grid.arrange(g1, g2a,g4, g3a,g5, nrow=3,ncol=2)
rm(list = ls())
gc()
#rm(list = ls())
#gc()
setwd("C:/Users/user/Documents/github/Zastosowanie-iterowanej-filtracji-do-modeli-stochastycznej-zmienno-ci/Dane")
#dlugosc szeregu czasowego
n=1000
#parametry
mu = -0.5
phi = 0.98
sigma = 0.2
gamma=5
#pakiety
library(pomp)
library(beepr)
library(doParallel)
library(doSNOW)
library(lattice)
library(ggplot2)
library(GGally)
library(gridExtra)
library(reshape2)
#FSV specyfikacja do symulacji
FSV_statenames <- c("H","G","Y_state")
FSV_rp_names <- c("mu","phi","gamma","sigma_eta")
FSV_paramnames <- FSV_rp_names
FSV_covarnames <- "covaryt"
rproc1 <- "
double lambda,omega;
omega = rnorm(0,sigma_eta);
lambda = rchisq(gamma) ;
H = mu*(1 - phi) + phi*H + omega;
G = lambda/gamma ;
"
####rownanie procesu pomiaru
rproc2.sim <- "
Y_state = rnorm( 0, exp(H/2)/sqrt(G) );
"
###do wypelniania danych
rproc2.filt <- "
Y_state = covaryt;
"
###symulacja modelu SVL
FSV_rproc.sim <- paste(rproc1,rproc2.sim)
####filtr czasteczkowy
FSV_rproc.filt <- paste(rproc1,rproc2.filt)
######inicalizacja
FSV_initializer <- "
H = rnorm(mu  ,sigma_eta/sqrt((1-phi*phi))) ;
Y_state = rnorm( 0,exp(H/2)/sqrt(G)  );
"
###????
FSV_rmeasure <- "
y=rnorm( 0,exp(H/2)/sqrt(G)  );
"
####rozk?ad warunkowy zmiennej Y
FSV_dmeasure <- "
lik=dnorm(y,0,exp(H/2)/sqrt(G),give_log);
"
####przeskalowanie parametr?w
FSV_toEstimationScale <- "
Tsigma_eta = log(sigma_eta);
Tphi = logit(phi);
Tgamma = log(gamma);
"
FSV_fromEstimationScale <- "
Tsigma_eta = exp(sigma_eta);
Tphi = expit(phi);
Tgamma= exp(gamma);
"
####wypelnianie modelu danymi
FSV.model <- pomp(data=data.frame(y=1:n,
time=1:n),
statenames=FSV_statenames,
paramnames=FSV_paramnames,
covarnames=FSV_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,1:n),
time=0:n),
tcovar="time",
rmeasure=Csnippet(FSV_rmeasure),
dmeasure=Csnippet(FSV_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(FSV_rproc.filt),delta.t=1),
initializer=Csnippet(FSV_initializer),
toEstimationScale=Csnippet(FSV_toEstimationScale),
fromEstimationScale=Csnippet(FSV_fromEstimationScale)
)
plot(FSV.model)
#######################################ustawienia dla pomp
params_test=c(
mu=mu,
phi=phi,
sigma_eta=sigma,
gamma=gamma
)
###trzy szybkosci filtru: 1 -szybki, 2 -sredni, 3 - wolny
run_level <- 1
#liczba czasteczek
FSV_Np <-          c(100, 1e3, 1e3)
FSV_Nmif <-        c(10,  50,  150)
FSV_Nreps_eval <-  c(4,   10,  20)
FSV_Nreps_local <- c(4,   10,  20)
FSV_Nreps_global <-c(4,   10,  20)
FSVlist<-list(FSV_Np ,FSV_Nmif,FSV_Nreps_eval,
FSV_Nreps_local,FSV_Nreps_global )
#parametry do metody mif2
FSV_rw.sd_rp <- 0.02
FSV_rw.sd_ivp <- 0.1
FSV_cooling.fraction.50 <- 0.5
##########################################################################
##########################################################################
########################################################symulowanie danych
log.volatility.list  <-simulate(FSV.model,nsim=1,seed=123,params=params_test,
states = TRUE, obs = TRUE)
zwroty.sim= log.volatility.list$obs[1,1,]
log.volatility.sim= log.volatility.list$states[1,1,]
G.sim=log.volatility.list$states[2,1,]
par(mfrow=c(4,1))
plot(log.volatility.list$obs[1,1,],type='l',ylab="y",main="zwroty")
plot(log.volatility.list$states[1,1,],type='l',ylab="h",main="log-zmiennosc")
plot(1/sqrt(log.volatility.list$states[2,1,]),type='l',ylab="1/sqrt(G)",main="1/sqrt(G)")
plot(exp(log.volatility.list$states[1,1,]/2)/sqrt(log.volatility.list$states[2,1,]),type='l',ylab="exp(h/2)/sqrt(G)",main="zmiennosc")
par(mfrow=c(1,1))
##########################################################################
##########################################################################
########################################################Filtrowanie danych
FSV.filt<-pomp(data=data.frame(y=zwroty.sim,
time=1:n),
statenames=FSV_statenames,
paramnames=FSV_paramnames,
covarnames=FSV_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,zwroty.sim),
time=0:n),
tcovar="time",
rmeasure=Csnippet(FSV_rmeasure),
dmeasure=Csnippet(FSV_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(FSV_rproc.filt),delta.t=1),
initializer=Csnippet(FSV_initializer),
toEstimationScale=Csnippet(FSV_toEstimationScale),
fromEstimationScale=Csnippet(FSV_fromEstimationScale)
)
#wykres filtracji dla prawdziwych parametr?w
pf1 <- pfilter(FSV.filt,params=params_test,
Np=1000,filter.traj=T)
plot(pf1)
##########################################################################
##########################################################################
######################################################Estymacja parametrow
FSV_box <- rbind(
sigma_eta=c(0.1,1),
phi    = c(0.9,0.99),
mu = c(-1,01),
gamma=c(4,6)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
start_time <- Sys.time()
t.if.FSV <- system.time({
if.FSV <- foreach(i=1:FSVlist[[5]][run_level] ,
.packages='pomp', .combine=c,.export = "FSVlist",
.options.multicore=list(set.seed=TRUE)) %dopar% try(
pomp::mif2(FSV.filt,start=apply(FSV_box,1,function(x) runif(1,x[1],x[2])),Np=FSVlist[[1]][run_level] , Nmif=FSVlist[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=FSV_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu      = FSV_rw.sd_rp,
phi       = FSV_rw.sd_rp,
sigma_eta = FSV_rw.sd_rp,
gamma     = FSV_rw.sd_rp
)
)
)
L.if.FSV <- foreach(i=1:FSVlist[[5]][run_level] ,.packages='pomp', .export = "FSVlist",
.combine=rbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
logmeanexp(
replicate(FSVlist[[3]][run_level] ,
logLik(pfilter(FSV.filt,params=coef(if.FSV[[i]]),Np=FSVlist[[1]][run_level]  ))
),
se=TRUE)
)
H.if.FSV<- foreach(i=1:FSVlist[[5]][run_level] ,.packages='pomp', .export = "FSVlist",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(FSV.filt,params=coef(if.FSV[[i]]),Np=FSVlist[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
end_time <- Sys.time()
difftime(end_time,start_time, units = "mins")
plot(if.FSV)
if.FSV.box  <- data.frame(logLik=L.if.FSV[,1],logLik_se=L.if.FSV[,2],t(sapply(if.FSV,coef)))
if.FSV.box [which.max(if.FSV.box$logLik),]
pairs(~logLik+mu+phi+sigma_eta+gamma,data=if.FSV.box )
params_nowe2<- c(
mu        = as.numeric(if.FSV.box[which.max(if.FSV.box $logLik),'mu']),
phi         = as.numeric(if.FSV.box[which.max(if.FSV.box $logLik),'phi']),
sigma_eta   = as.numeric(if.FSV.box[which.max(if.FSV.box$logLik),'sigma_eta']),
gamma       = as.numeric(if.FSV.box[which.max(if.FSV.box$logLik),'gamma'])
)
params_nowe2
hyperparams <- list(min = c(-20,0.9,4,0), max = c(0,1,6,1) )
FSV.dprior <- function (params, ..., log) {
f <- sum(dunif(params, min = hyperparams$min, max = hyperparams$max,
log = TRUE))
if (log) f else exp(f)
}
pmcmc1 <-   pmcmc(pomp(FSV.filt, dprior = FSV.dprior), start = params_test,
Nmcmc = 1000, Np = 100, max.fail = Inf,
proposal = mvn.diag.rw(c(mu = 0.01, phi = 0.01, gamma=0.01, sigma_eta = 0.01)))
continue( pmcmc1 ,Nmcmc=2000,proposal=mvn.rw(covmat( pmcmc1 ))) -> pmcmc1
hyperparams <- list(min = c(-20,0.9,4,0), max = c(0,1,6,1) )
FSV.dprior <- function (params, ..., log) {
f <- sum(dunif(params, min = hyperparams$min, max = hyperparams$max,
log = TRUE))
if (log) f else exp(f)
}
pmcmc1 <-   pmcmc(pomp(FSV.filt, dprior = FSV.dprior), start = params_test,
Nmcmc = 1000, Np = 100, max.fail = Inf,
proposal = mvn.diag.rw(c(mu = 0.01, phi = 0.01, gamma=0.01, sigma_eta = 0.01)))
covmat( pmcmc1 )
plot(  pmcmc1 )
hyperparams <- list(min = c(-1,0.9,4,0), max = c(0,1,6,1) )
FSV.dprior <- function (params, ..., log) {
f <- sum(dunif(params, min = hyperparams$min, max = hyperparams$max,
log = TRUE))
if (log) f else exp(f)
}
pmcmc1 <-   pmcmc(pomp(FSV.filt, dprior = FSV.dprior), start = params_test,
Nmcmc = 1000, Np = 100, max.fail = Inf,
proposal = mvn.diag.rw(c(mu = 0.01, phi = 0.01, gamma=0.01, sigma_eta = 0.01)))
continue( pmcmc1 ,Nmcmc=2000,proposal=mvn.rw(covmat( pmcmc1 ))) -> pmcmc1
FSV.filt
FSV.dprior
params_test
params_test=c(
mu=mu,
phi=phi,
gamma=gamma,
sigma_eta=sigma
)
hyperparams <- list(min = c(-1,0.9,4,0), max = c(0,1,6,1) )
FSV.dprior <- function (params, ..., log) {
f <- sum(dunif(params, min = hyperparams$min, max = hyperparams$max,
log = TRUE))
if (log) f else exp(f)
}
pmcmc1 <-   pmcmc(pomp(FSV.filt, dprior = FSV.dprior), start = params_test,
Nmcmc = 1000, Np = 100, max.fail = Inf,
proposal = mvn.diag.rw(c(mu = 0.01, phi = 0.01, gamma=0.01, sigma_eta = 0.01)))
continue( pmcmc1 ,Nmcmc=2000,proposal=mvn.rw(covmat( pmcmc1 ))) -> pmcmc1
plot(  pmcmc1 )
coef(pmcmc1 )

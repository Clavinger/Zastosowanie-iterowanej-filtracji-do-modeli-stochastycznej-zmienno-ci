library(beepr)
library(doParallel)
library(doSNOW)
library(lattice)
library(ggplot2)
library(GGally)
library(gridExtra)
library(reshape2)
##########################################################################
##########################################################################
################################################################ustawienia
#liczba symulacji
sym=2
#liczba obserwacji
n=1000
#parametry
mu = -0.5
phi = 0.98
sigma = 0.2
##########################################################################
##########################################################################
######################################################implementacja modelu
####nazwy
bsv_statenames <- c("H","Y_state")
bsv_rp_names <- c("mu","phi","sigma_eta")
#bsv_ivp_names <- c("H_0")
#bsv_paramnames <- c(bsv_rp_names,bsv_ivp_names)
bsv_paramnames <- c(bsv_rp_names)
bsv_covarnames <- "covaryt"
rproc1 <- "
double omega;
omega = rnorm(0,sigma_eta );
H = mu*(1 - phi) + phi*H + omega;
"
####rownanie procesu pomiaru
rproc2.sim <- "
Y_state = rnorm( 0,exp(H/2) );
"
###do wypelniania danych
rproc2.filt <- "
Y_state = covaryt;
"
###symulacja modelu SVL
bsv_rproc.sim <- paste(rproc1,rproc2.sim)
####filtr czasteczkowy
bsv_rproc.filt <- paste(rproc1,rproc2.filt)
######inicalizacja
#H=H_0
bsv_initializer <- "
H = rnorm(mu  ,sigma_eta/sqrt((1-phi*phi))) ;
Y_state = rnorm( 0,exp(H/2) );
"
###????y=Y_state;
bsv_rmeasure <- "
y=rnorm( 0,exp(H/2) );
"
####rozk?ad warunkowy zmiennej Y
bsv_dmeasure <- "
lik=dnorm(y,0,exp(H/2),give_log);
"
####przeskalowanie parametr?w
bsv_toEstimationScale <- "
Tsigma_eta = log(sigma_eta);
Tphi = logit(phi);
"
bsv_fromEstimationScale <- "
Tsigma_eta = exp(sigma_eta);
Tphi = expit(phi);
"
bsv.model<-pomp(data=data.frame(y=1:n,
time=1:n),
statenames=bsv_statenames,
paramnames=bsv_paramnames,
covarnames=bsv_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=0:n,
time=0:n),
tcovar="time",
rmeasure=Csnippet(bsv_rmeasure),
dmeasure=Csnippet(bsv_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(bsv_rproc.filt),delta.t=1),
initializer=Csnippet(bsv_initializer),
toEstimationScale=Csnippet(bsv_toEstimationScale),
fromEstimationScale=Csnippet(bsv_fromEstimationScale)
)
#######################################ustawienia dla pomp
params_test=c(
mu=mu,
phi=phi,
sigma_eta=sigma
)
###trzy szybkosci filtru: 1 -szybki, 2 -sredni, 3 - wolny
run_level <- 1
#liczba czasteczek
bsv_Np <-          c(100,1e3,1e3)
bsv_Nmif <-        c(10, 50,150)
bsv_Nreps_eval <-  c(4,  10,  20)
bsv_Nreps_local <- c(4, 10, 10)
bsv_Nreps_global <-c(4, 10, 10)
bsvlist<-list(bsv_Np ,bsv_Nmif,bsv_Nreps_eval,
bsv_Nreps_local,bsv_Nreps_global )
#parametry do metody mif2
bsv_rw.sd_rp <- 0.02
bsv_rw.sd_ivp <- 0.1
bsv_cooling.fraction.50 <- 0.5
##########################################################################
##########################################################################
########################################################symulowanie danych
log.volatility.list  <-simulate(bsv.model,nsim=1,seed=123,params=c(mu=mu,phi=phi,sigma_eta=sigma),
states = TRUE, obs = TRUE)
zwroty.sim= log.volatility.list$obs[1,1,]
log.volatility.sim= log.volatility.list$states[1,1,]
par(mfrow=c(3,1))
plot(log.volatility.list$obs[1,1,],type='l',ylab="y",main="zwroty")
plot(log.volatility.list$states[1,1,],type='l',ylab="h",main="log-zmiennosc")
plot(exp(log.volatility.list$states[1,1,]/2),type='l',ylab="exp(h/2)",main="zmiennosc")
par(mfrow=c(1,1))
wykres1= rbind(log.volatility.list$obs[1,1,],
log.volatility.list$states[1,1,],
exp(log.volatility.list$states[1,1,]/2))
row.names(wykres1) = c("y","H","exp(H/2)")
wykres1=as.data.frame(t(wykres1))
g1<-ggplot(data = as.data.frame(wykres1), aes(x = 1:n, y = y))  +
geom_line(color = "royalblue", size = .5)+ggtitle('zwroty')+labs(x="time")+theme_bw()
g2<-ggplot(data = as.data.frame(wykres1), aes(x = 1:n, y = H))  +
geom_line(color = "royalblue", size = .5)+ggtitle('log-zmienność')+labs(x="time")+theme_bw()
g3<-ggplot(data = as.data.frame(wykres1), aes(x = 1:n, y = exp(H/2)))  +
geom_line(color = "royalblue", size = .5)+ggtitle('zmienność')+labs(x="time")+theme_bw()
grid.arrange(g1, g2,g3, nrow=3)
##########################################################################
##########################################################################
########################################################Filtrowanie danych
bsv.filt<-pomp(data=data.frame(y=zwroty.sim,
time=1:n),
statenames=bsv_statenames,
paramnames=bsv_paramnames,
covarnames=bsv_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,zwroty.sim),
time=0:n),
tcovar="time",
rmeasure=Csnippet(bsv_rmeasure),
dmeasure=Csnippet(bsv_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(bsv_rproc.filt),delta.t=1),
initializer=Csnippet(bsv_initializer),
toEstimationScale=Csnippet(bsv_toEstimationScale),
fromEstimationScale=Csnippet(bsv_fromEstimationScale)
)
#wykres filtracji dla prawdziwych parametr?w
pf1 <- pfilter(bsv.filt,params=params_test,
Np=1000,filter.traj=T)
rm(list = ls())
setwd("C:/Users/user/Documents/github/Zastosowanie-iterowanej-filtracji-do-modeli-stochastycznej-zmienno-ci/Dane")
#pakiety
library(pomp)
library(beepr)
library(doParallel)
library(doSNOW)
library(lattice)
library(ggplot2)
library(GGally)
library(gridExtra)
library(reshape2)
##########################################################################
##########################################################################
################################################################ustawienia
#liczba symulacji
sym=2
#liczba obserwacji
n=1000
#parametry
mu = -0.5
phi = 0.98
sigma = 0.2
##########################################################################
##########################################################################
######################################################implementacja modelu
####nazwy
bsv_statenames <- c("H","Y_state")
bsv_rp_names <- c("mu","phi","sigma_eta")
#bsv_ivp_names <- c("H_0")
#bsv_paramnames <- c(bsv_rp_names,bsv_ivp_names)
bsv_paramnames <- c(bsv_rp_names)
bsv_covarnames <- "covaryt"
rproc1 <- "
double omega;
omega = rnorm(0,sigma_eta );
H = mu*(1 - phi) + phi*H + omega;
"
####rownanie procesu pomiaru
rproc2.sim <- "
Y_state = rnorm( 0,exp(H/2) );
"
###do wypelniania danych
rproc2.filt <- "
Y_state = covaryt;
"
###symulacja modelu SVL
bsv_rproc.sim <- paste(rproc1,rproc2.sim)
####filtr czasteczkowy
bsv_rproc.filt <- paste(rproc1,rproc2.filt)
######inicalizacja
#H=H_0
bsv_initializer <- "
H = rnorm(mu  ,sigma_eta/sqrt((1-phi*phi))) ;
Y_state = rnorm( 0,exp(H/2) );
"
###????y=Y_state;
bsv_rmeasure <- "
y=rnorm( 0,exp(H/2) );
"
####rozk?ad warunkowy zmiennej Y
bsv_dmeasure <- "
lik=dnorm(y,0,exp(H/2),give_log);
"
####przeskalowanie parametr?w
bsv_toEstimationScale <- "
Tsigma_eta = log(sigma_eta);
Tphi = logit(phi);
"
bsv_fromEstimationScale <- "
Tsigma_eta = exp(sigma_eta);
Tphi = expit(phi);
"
bsv.model<-pomp(data=data.frame(y=1:n,
time=1:n),
statenames=bsv_statenames,
paramnames=bsv_paramnames,
covarnames=bsv_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=0:n,
time=0:n),
tcovar="time",
rmeasure=Csnippet(bsv_rmeasure),
dmeasure=Csnippet(bsv_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(bsv_rproc.filt),delta.t=1),
initializer=Csnippet(bsv_initializer),
toEstimationScale=Csnippet(bsv_toEstimationScale),
fromEstimationScale=Csnippet(bsv_fromEstimationScale)
)
bsv.filt<-pomp(data=data.frame(y=zwroty.sim,
time=1:n),
statenames=bsv_statenames,
paramnames=bsv_paramnames,
covarnames=bsv_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,zwroty.sim),
time=0:n),
tcovar="time",
rmeasure=Csnippet(bsv_rmeasure),
dmeasure=Csnippet(bsv_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(bsv_rproc.filt),delta.t=1),
initializer=Csnippet(bsv_initializer),
toEstimationScale=Csnippet(bsv_toEstimationScale),
fromEstimationScale=Csnippet(bsv_fromEstimationScale)
)
log.volatility.list  <-simulate(bsv.model,nsim=1,seed=123,params=c(mu=mu,phi=phi,sigma_eta=sigma),
states = TRUE, obs = TRUE)
zwroty.sim= log.volatility.list$obs[1,1,]
log.volatility.sim= log.volatility.list$states[1,1,]
bsv.filt<-pomp(data=data.frame(y=zwroty.sim,
time=1:n),
statenames=bsv_statenames,
paramnames=bsv_paramnames,
covarnames=bsv_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,zwroty.sim),
time=0:n),
tcovar="time",
rmeasure=Csnippet(bsv_rmeasure),
dmeasure=Csnippet(bsv_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(bsv_rproc.filt),delta.t=1),
initializer=Csnippet(bsv_initializer),
toEstimationScale=Csnippet(bsv_toEstimationScale),
fromEstimationScale=Csnippet(bsv_fromEstimationScale)
)
bsv_box <- rbind(
sigma_eta=c(0.1,1),
phi    = c(0.9,0.99),
mu_h = c(-1,01)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
start_time <- Sys.time()
t.if.bsv <- system.time({
if.bsv <- foreach(i=1:bsvlist[[5]][run_level] ,
.packages='pomp', .combine=c,.export = "bsvlist",
.options.multicore=list(set.seed=TRUE)) %dopar% try(
pomp::mif2(bsv.filt,start=apply(bsv_box,1,function(x) runif(1,x[1],x[2])),Np=bsvlist[[1]][run_level] , Nmif=bsvlist[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=bsv_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu      = bsv_rw.sd_rp,
phi       = bsv_rw.sd_rp,
sigma_eta = bsv_rw.sd_rp
)
)
)
L.if.bsv <- foreach(i=1:bsvlist[[5]][run_level] ,.packages='pomp', .export = "bsvlist",
.combine=rbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
logmeanexp(
replicate(bsvlist[[3]][run_level] ,
logLik(pfilter(bsv.filt,params=coef(if.bsv[[i]]),Np=bsvlist[[1]][run_level]  ))
),
se=TRUE)
)
H.if.bsv<- foreach(i=1:bsvlist[[5]][run_level] ,.packages='pomp', .export = "bsvlist",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(bsv.filt,params=coef(if.bsv[[i]]),Np=bsvlist[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
end_time <- Sys.time()
difftime(end_time,start_time, units = "mins")
params_test=c(
mu=mu,
phi=phi,
sigma_eta=sigma
)
###trzy szybkosci filtru: 1 -szybki, 2 -sredni, 3 - wolny
run_level <- 1
#liczba czasteczek
bsv_Np <-          c(100,1e3,1e3)
bsv_Nmif <-        c(10, 50,150)
bsv_Nreps_eval <-  c(4,  10,  20)
bsv_Nreps_local <- c(4, 10, 10)
bsv_Nreps_global <-c(4, 10, 10)
bsvlist<-list(bsv_Np ,bsv_Nmif,bsv_Nreps_eval,
bsv_Nreps_local,bsv_Nreps_global )
#parametry do metody mif2
bsv_rw.sd_rp <- 0.02
bsv_rw.sd_ivp <- 0.1
bsv_cooling.fraction.50 <- 0.5
bsv_box <- rbind(
sigma_eta=c(0.1,1),
phi    = c(0.9,0.99),
mu_h = c(-1,01)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
start_time <- Sys.time()
t.if.bsv <- system.time({
if.bsv <- foreach(i=1:bsvlist[[5]][run_level] ,
.packages='pomp', .combine=c,.export = "bsvlist",
.options.multicore=list(set.seed=TRUE)) %dopar% try(
pomp::mif2(bsv.filt,start=apply(bsv_box,1,function(x) runif(1,x[1],x[2])),Np=bsvlist[[1]][run_level] , Nmif=bsvlist[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=bsv_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu      = bsv_rw.sd_rp,
phi       = bsv_rw.sd_rp,
sigma_eta = bsv_rw.sd_rp
)
)
)
L.if.bsv <- foreach(i=1:bsvlist[[5]][run_level] ,.packages='pomp', .export = "bsvlist",
.combine=rbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
logmeanexp(
replicate(bsvlist[[3]][run_level] ,
logLik(pfilter(bsv.filt,params=coef(if.bsv[[i]]),Np=bsvlist[[1]][run_level]  ))
),
se=TRUE)
)
H.if.bsv<- foreach(i=1:bsvlist[[5]][run_level] ,.packages='pomp', .export = "bsvlist",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(bsv.filt,params=coef(if.bsv[[i]]),Np=bsvlist[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
end_time <- Sys.time()
difftime(end_time,start_time, units = "mins")
plot(if.bsv)
bsv_box <- rbind(
sigma_eta=c(0.1,1),
phi    = c(0.9,0.99),
mu = c(-1,01)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
start_time <- Sys.time()
t.if.bsv <- system.time({
if.bsv <- foreach(i=1:bsvlist[[5]][run_level] ,
.packages='pomp', .combine=c,.export = "bsvlist",
.options.multicore=list(set.seed=TRUE)) %dopar% try(
pomp::mif2(bsv.filt,start=apply(bsv_box,1,function(x) runif(1,x[1],x[2])),Np=bsvlist[[1]][run_level] , Nmif=bsvlist[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=bsv_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu      = bsv_rw.sd_rp,
phi       = bsv_rw.sd_rp,
sigma_eta = bsv_rw.sd_rp
)
)
)
L.if.bsv <- foreach(i=1:bsvlist[[5]][run_level] ,.packages='pomp', .export = "bsvlist",
.combine=rbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
logmeanexp(
replicate(bsvlist[[3]][run_level] ,
logLik(pfilter(bsv.filt,params=coef(if.bsv[[i]]),Np=bsvlist[[1]][run_level]  ))
),
se=TRUE)
)
H.if.bsv<- foreach(i=1:bsvlist[[5]][run_level] ,.packages='pomp', .export = "bsvlist",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(bsv.filt,params=coef(if.bsv[[i]]),Np=bsvlist[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
end_time <- Sys.time()
difftime(end_time,start_time, units = "mins")
plot(if.bsv)
if.bsv.box  <- data.frame(logLik=L.if.bsv[,1],logLik_se=L.if.bsv[,2],t(sapply(if.bsv,coef)))
if.bsv.box [which.max(if.bsv.box$logLik),]
pairs(~logLik+mu+phi+sigma_eta,data=if.bsv.box )
wyniki.mif.loglik<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level])
nazwy=1:bsvlist[[5]][run_level]
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.loglik[,i]=conv.rec(if.bsv)[[i]][1:bsvlist[[2]][run_level] ,1]
for(i in 1:bsvlist[[5]][run_level]) nazwy[i]=paste(i)
wyniki.mif.loglik[,bsvlist[[5]][run_level]+1]=1:bsvlist[[2]][run_level]
wyniki.mif.loglik=as.data.frame(wyniki.mif.loglik)
names(wyniki.mif.loglik)<-c(nazwy,"nr")
wyniki.mif.loglik.long<-melt(wyniki.mif.loglik,id="nr")
names(wyniki.mif.loglik.long)<-c("Nr_iteracji","IF","value")
g1<-ggplot(data = wyniki.mif.loglik.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle('logLik')+
geom_line(size = 1)+labs(x="Nr iteracji",y="Loglik")+theme_bw()+
scale_x_discrete(limits=1:bsvlist[[2]][run_level])
wyniki.mif.mu<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level]+1)
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.mu[,i]=conv.rec(if.bsv)[[i]][,3]
wyniki.mif.mu[,bsvlist[[5]][run_level]+1]=0:bsvlist[[2]][run_level]
wyniki.mif.mu=as.data.frame(wyniki.mif.mu)
names(wyniki.mif.mu)<-c(nazwy,"nr")
wyniki.mif.mu.long<-melt(wyniki.mif.mu,id="nr")
names(wyniki.mif.mu.long)<-c("Nr_iteracji","IF","value")
g2<-ggplot(data = wyniki.mif.mu.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle(expression(mu))+
geom_line(size = 1)+labs(x="Nr iteracji",y=expression(mu))+theme_bw()+
scale_x_discrete(limits=0:bsvlist[[2]][run_level])
wyniki.mif.phi<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level]+1)
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.phi[,i]=conv.rec(if.bsv)[[i]][,4]
wyniki.mif.phi[,bsvlist[[5]][run_level]+1]=0:bsvlist[[2]][run_level]
wyniki.mif.phi=as.data.frame(wyniki.mif.phi)
names(wyniki.mif.phi)<-c(nazwy,"nr")
wyniki.mif.phi.long<-melt(wyniki.mif.phi,id="nr")
names(wyniki.mif.phi.long)<-c("Nr_iteracji","IF","value")
g3<-ggplot(data = wyniki.mif.phi.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle(expression(phi))+
geom_line(size = 1)+labs(x="Nr iteracji",y=expression(phi))+theme_bw()+
scale_x_discrete(limits=0:bsvlist[[2]][run_level])
wyniki.mif.sigma<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level]+1)
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.sigma[,i]=conv.rec(if.bsv)[[i]][,5]
wyniki.mif.sigma[,bsvlist[[5]][run_level]+1]=0:bsvlist[[2]][run_level]
wyniki.mif.sigma=as.data.frame(wyniki.mif.sigma)
names(wyniki.mif.sigma)<-c(nazwy,"nr")
wyniki.mif.sigma.long<-melt(wyniki.mif.sigma,id="nr")
names(wyniki.mif.sigma.long)<-c("Nr_iteracji","IF","value")
g4<-ggplot(data = wyniki.mif.sigma.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle(expression(sigma[eta]))+
geom_line(size = 1)+labs(x="Nr iteracji",y=expression(sigma[eta]))+theme_bw()+
scale_x_discrete(limits=0:bsvlist[[2]][run_level])
grid.arrange(g1, g2,g3,g4,  nrow=2,ncol=2)
conv.rec(if.bsv)[[i]]
wyniki.mif.loglik<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level])
nazwy=1:bsvlist[[5]][run_level]
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.loglik[,i]=conv.rec(if.bsv)[[i]][1:bsvlist[[2]][run_level] ,1]
for(i in 1:bsvlist[[5]][run_level]) nazwy[i]=paste(i)
wyniki.mif.loglik[,bsvlist[[5]][run_level]+1]=1:bsvlist[[2]][run_level]
wyniki.mif.loglik=as.data.frame(wyniki.mif.loglik)
names(wyniki.mif.loglik)<-c(nazwy,"nr")
wyniki.mif.loglik.long<-melt(wyniki.mif.loglik,id="nr")
names(wyniki.mif.loglik.long)<-c("Nr_iteracji","IF","value")
g1<-ggplot(data = wyniki.mif.loglik.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle('logLik')+
geom_line(size = 1)+labs(x="Nr iteracji",y="Loglik")+theme_bw()+
scale_x_discrete(limits=1:bsvlist[[2]][run_level])
wyniki.mif.mu<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level]+1)
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.mu[,i]=conv.rec(if.bsv)[[i]][,5]
wyniki.mif.mu[,bsvlist[[5]][run_level]+1]=0:bsvlist[[2]][run_level]
wyniki.mif.mu=as.data.frame(wyniki.mif.mu)
names(wyniki.mif.mu)<-c(nazwy,"nr")
wyniki.mif.mu.long<-melt(wyniki.mif.mu,id="nr")
names(wyniki.mif.mu.long)<-c("Nr_iteracji","IF","value")
g2<-ggplot(data = wyniki.mif.mu.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle(expression(mu))+
geom_line(size = 1)+labs(x="Nr iteracji",y=expression(mu))+theme_bw()+
scale_x_discrete(limits=0:bsvlist[[2]][run_level])
wyniki.mif.phi<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level]+1)
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.phi[,i]=conv.rec(if.bsv)[[i]][,4]
wyniki.mif.phi[,bsvlist[[5]][run_level]+1]=0:bsvlist[[2]][run_level]
wyniki.mif.phi=as.data.frame(wyniki.mif.phi)
names(wyniki.mif.phi)<-c(nazwy,"nr")
wyniki.mif.phi.long<-melt(wyniki.mif.phi,id="nr")
names(wyniki.mif.phi.long)<-c("Nr_iteracji","IF","value")
g3<-ggplot(data = wyniki.mif.phi.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle(expression(phi))+
geom_line(size = 1)+labs(x="Nr iteracji",y=expression(phi))+theme_bw()+
scale_x_discrete(limits=0:bsvlist[[2]][run_level])
wyniki.mif.sigma<-matrix(NaN,ncol=bsvlist[[5]][run_level]+1,nrow= bsvlist[[2]][run_level]+1)
for(i in 1:bsvlist[[5]][run_level]) wyniki.mif.sigma[,i]=conv.rec(if.bsv)[[i]][,3]
wyniki.mif.sigma[,bsvlist[[5]][run_level]+1]=0:bsvlist[[2]][run_level]
wyniki.mif.sigma=as.data.frame(wyniki.mif.sigma)
names(wyniki.mif.sigma)<-c(nazwy,"nr")
wyniki.mif.sigma.long<-melt(wyniki.mif.sigma,id="nr")
names(wyniki.mif.sigma.long)<-c("Nr_iteracji","IF","value")
g4<-ggplot(data = wyniki.mif.sigma.long, aes(x = Nr_iteracji,y=value,colour=IF,linetype=IF) ) +ggtitle(expression(sigma[eta]))+
geom_line(size = 1)+labs(x="Nr iteracji",y=expression(sigma[eta]))+theme_bw()+
scale_x_discrete(limits=0:bsvlist[[2]][run_level])
grid.arrange(g1, g2,g3,g4,  nrow=2,ncol=2)
rm(list = ls())
?gc
gc()

#FSV specyfikacja

FSV_statenames <- c("H","G","Y_state")
FSV_rp_names <- c("mu_h","phi","gamma","sigma_eta")
FSV_ivp_names <- c("H_0")
FSV_paramnames <- c(FSV_rp_names,FSV_ivp_names)
FSV_covarnames <- "covaryt"


rproc1 <- "
double lambda,omega;
omega = rnorm(0,sigma_eta);
lambda = rchisq(gamma) ;
H = mu_h*(1 - phi) + phi*H + omega;
G = lambda*gamma;
"

####rownanie procesu pomiaru
rproc2.sim <- "
Y_state = rnorm( 0, exp(H/2)/sqrt(G) );
"
###do wypelniania danych
rproc2.filt <- "
Y_state = covaryt;
"

###symulacja modelu SVL
FSV_rproc.sim <- paste(rproc1,rproc2.sim)

####filtr czasteczkowy 
FSV_rproc.filt <- paste(rproc1,rproc2.filt)


######inicalizacja
FSV_initializer <- "
H = H_0;
Y_state = rnorm( 0,exp(H/2)/sqrt(G)  );
"
###????
FSV_rmeasure <- "
y=Y_state;
"

####rozk?ad warunkowy zmiennej Y
FSV_dmeasure <- "
lik=dnorm(y,0,exp(H/2)/sqrt(G),give_log);
"


####przeskalowanie parametr?w 
FSV_toEstimationScale <- "
Tsigma_eta = log(sigma_eta);
Tphi = logit(phi);
Tgamma = log(gamma);
"

FSV_fromEstimationScale <- "
Tsigma_eta = exp(sigma_eta);
Tphi = expit(phi);
Tgamma= exp(gamma);
"



####wypelnianie modelu danymi
FSV.filt <- pomp(data=data.frame(y=as.vector(reszty),
                                 time=1:length(reszty)),
                 statenames=FSV_statenames,
                 paramnames=FSV_paramnames,
                 covarnames=FSV_covarnames,
                 times="time",
                 t0=0,
                 covar=data.frame(covaryt=c(0,as.vector(reszty)),
                                  time=0:length(reszty)),
                 tcovar="time",
                 rmeasure=Csnippet(FSV_rmeasure),
                 dmeasure=Csnippet(FSV_dmeasure),
                 rprocess=discrete.time.sim(step.fun=Csnippet(FSV_rproc.filt),delta.t=1),
                 initializer=Csnippet(FSV_initializer),
                 toEstimationScale=Csnippet(FSV_toEstimationScale), 
                 fromEstimationScale=Csnippet(FSV_fromEstimationScale)
)

plot(FSV.filt)

FSV_nowe.parametry



#obiekt symulacja
sim1.sim <- pomp(FSV.filt, 
                 statenames=FSV_statenames,
                 paramnames=FSV_paramnames,
                 covarnames=FSV_covarnames,
                 rprocess=discrete.time.sim(step.fun=Csnippet(FSV_rproc.sim),delta.t=1
                 )
)


FSV_params_test <- c(
  mu_h =0.5,       
  phi = 0.99,     
  sigma_eta = 0.1,
  gamma=5,
  H_0=0.1
)


#symulacja danych
sim1.sim <- simulate(sim1.sim,seed=1,params=FSV_params_test)
sim1.sim 
plot(sim1.sim)
plot(exp(H)~time,data=sim1.sim,type='l',main="Simulated Volatility")
plot(Y_state~time,data=sim1.sim,type='l',main="Simulated Y_state")
plot(G~time,data=sim1.sim,type='l',main="G")


###trzy szybkosci filtru: 1 -szybki, 2 -sredni, 3 - wolny
run_level <- 1

#liczba czasteczek
wig20_Np <-          c(100,1e3,2e3)
wig20_Nmif <-        c(10, 100,200)
wig20_Nreps_eval <-  c(4,  10,  20)
wig20_Nreps_local <- c(4, 10, 20)
wig20_Nreps_global <-c(4, 10, 100)

wig20list<-list(wig20_Np ,wig20_Nmif,wig20_Nreps_eval,
                wig20_Nreps_local,wig20_Nreps_global )

wig20list[[1]][run_level] 


#parametry do metody mif2
wig20_rw.sd_rp <- 0.01
wig20_rw.sd_ivp <- 0.1
wig20_cooling.fraction.50 <- 0.75



FSV_box <- rbind(
  sigma_eta=c(0.05,0.3),
  phi    = c(0.9,0.99),
  mu_h = c(-2,2),
  gamma=c(2,10),
  H_0 = c(-1,1)
)


cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)

#stew(file=sprintf("box_eval.rda",run_level),{
FSV_t.box <- system.time({
  FSV_if.box <- foreach(i=1:wig20list[[5]][run_level],.packages='pomp', .export = "wig20list",.combine=c,
                        .options.multicore=list(set.seed=TRUE)) %dopar%  try (
                          pomp::mif2(
                            FSV.filt,Np=wig20list[[1]][run_level] , Nmif=wig20list[[2]][run_level] ,cooling.type="geometric",
                            start=apply(FSV_box,1,function(x) runif(1,x[1],x[2])),
                            cooling.fraction.50=wig20_cooling.fraction.50,
                            transform=TRUE,
                            rw.sd = rw.sd(
                              mu_h      = wig20_rw.sd_rp,
                              phi       = wig20_rw.sd_rp,
                              sigma_eta = wig20_rw.sd_rp,
                              gamma     = wig20_rw.sd_rp,
                              H_0       = ivp(wig20_rw.sd_ivp)
                            )
                          )
                        )
  FSV_L.box <- foreach(i=1:wig20list[[5]][run_level] ,.packages='pomp', .export = "wig20list",.combine=rbind,
                       .options.multicore=list(set.seed=TRUE)) %dopar% {
                         set.seed(87932+i)
                         logmeanexp(
                           replicate(wig20list[[3]][run_level] ,
                                     logLik(pfilter(FSV.filt,params=coef(FSV_if.box[[i]]),Np=wig20list[[1]][run_level] ))
                           ), 
                           se=TRUE)
                       }
  
  FSV_H.box<- foreach(i=1:wig20list[[5]][run_level] ,.packages='pomp', .export = "wig20list", 
                      .combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
                        exp(pfilter(FSV.filt,params=coef(FSV_if.box[[i]]),Np=wig20list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
                      )
})
#},seed=290860873,kind="L'Ecuyer")

stopCluster(cl)
beep(2)
plot( FSV_if.box )



FSV_r.box <- data.frame(logLik=FSV_L.box[,1],logLik_se=FSV_L.box[,2],t(sapply(FSV_if.box,coef)))
summary(FSV_r.box$logLik,digits=5)
FSV_r.box [which.max(FSV_r.box $logLik),]
pairs(~logLik+mu_h+phi+sigma_eta,data=FSV_r.box)
